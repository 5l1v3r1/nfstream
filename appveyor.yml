version: 5.1.{build}

matrix:
  fast_finish: true

environment:
  global:
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.6.5
      PYTHON_ARCH: "64"
      GENERATOR: "MinGW Makefiles"
      SDK: npcap-sdk-0.1
      MINGW_ROOT: C:\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0

install:
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
      https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
      Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
      throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""
  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "python -m pip install --upgrade pip"
  - cd ..
  - git clone -q --depth=5 --branch=libpcap-1.9 https://github.com/aouinizied/libpcap.git
  - cd libpcap
  - cinst winflexbison
  - win_flex --version
  - win_bison --version
  - appveyor DownloadFile http://www.winpcap.org/install/bin/WpdPack_4_1_2.zip
  - 7z x .\WpdPack_4_1_2.zip -oc:\projects\libpcap\Win32
  - appveyor DownloadFile https://nmap.org/npcap/dist/npcap-sdk-0.1.zip
  - 7z x .\npcap-sdk-0.1.zip -oc:\projects\libpcap\Win32

build_script:
  - type NUL >.devel
  - copy c:\projects\nfstream\nfstream\observer_cc.c c:\projects\libpcap\testprogs\observer_cc.c
  - md build
  - cd build
  # Remove the default MinGW path
  - if "%GENERATOR%"=="MinGW Makefiles" set PATH=%PATH:C:\MinGW\bin;=%
  # Add the specified MinGW path
  - if "%GENERATOR%"=="MinGW Makefiles" set PATH=%MINGW_ROOT%\mingw64\bin;%PATH%
  # Remove the path to Git, so that we don't pick up its sh.exe, as
  # that breaks MinGW builds - CMake checks for that and fails in the
  # configuration stage
  - if "%GENERATOR%"=="MinGW Makefiles" set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - cmake -DPacket_ROOT=c:\projects\libpcap\Win32\%SDK% -G"%GENERATOR%" ..
  - if NOT "%GENERATOR%"=="MinGW Makefiles" msbuild /m /nologo /p:Configuration=Release pcap.sln
  - if "%GENERATOR%"=="MinGW Makefiles" mingw32-make
  - mingw32-make testprogs
  - cd testprogs
  - cd
  - dir
  - cd ..
  - cd ..
  - cd ..
  - cd nfstream
  - dir
#  - "python -c \"from nfstream import NFObserver; src = str(55); obs=NFObserver(source=src)\""